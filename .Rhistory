)
data
library(dplyr)
library(tidyr)
data %>% pivot_longer(government:selv)
data %>% pivot_longer(government:selv)
data %>% pivot_longer(government:self)
data %>% pivot_longer(government:self,values_drop_na =TRUE)
data %>% gather(government:self)
data %>% pivot_longer(government:self)
data %>% pivot_longer(government:self,values_drop_na = TRUE)
data %>% pivot_longer(government:self) %>% filter(value==1)
data %>%
pivot_longer(government:self) %>%
filter(value==1) %>%
select(-value)
data %>%
pivot_longer(government:self,names_to = "sector")
data %>%
pivot_longer(government:self,names_to = "sector") %>%
filter(value==1) %>%
select(-value) %>%
summarise(accross(sector),sum(employed))
data %>%
pivot_longer(government:self,names_to = "sector") %>%
filter(value==1) %>%
select(-value) %>%
group_by(sector) %>%
summarise(sum(employed))
DF <- as.data.frame(UCBAdmissions)
DF
data %>%
pivot_longer(government:self,names_to = "sector") %>%
filter(value==1) %>%
select(-value) %>%
group_by(sector) %>%
summarise(sum(employed/employed+unemployed))
data %>%
pivot_longer(government:self,names_to = "sector") %>%
filter(value==1) %>%
select(-value) %>%
group_by(sector) %>%
summarise(sum(employed)/sum(employed+unemployed))
data %>%
pivot_longer(government:self,names_to = "sector") %>%
filter(value==1) %>%
select(-value) %>%
group_by(sector) %>%
summarise(prop_emp<-sum(employed)/sum(employed+unemployed))
data %>%
pivot_longer(government:self,names_to = "sector") %>%
filter(value==1) %>%
select(-value) %>%
group_by(sector) %>%
summarise(prop_emp=sum(employed)/sum(employed+unemployed))
data
tapply(data$employed,data[3:5],sum,drop = FALSE)
tapply(data$employed,data[3:5],sum,drop = TRUE)
tapply(data$employed,data[3:5],sum,drop = TRUE,simplify = TRUE)
mapply(data$employed,data[3:5],sum,drop = TRUE,simplify = TRUE)
table(data)
tapply(data$employed,data[3:5],sum,drop = TRUE,simplify = TRUE)
tapply(data$employed,data[3:5],sum,drop = TRUE,simplify = FALSE)
tapply(data$employed,data[3:5],sum,drop = FALSE,simplify = FALSE)
tapply(data$employed,data[3:5],sum,drop = NULL,simplify = FALSE)
prop.table(data)
proportions(data)
proportions(data,margin = 1)
proportions(data,margin = c(1))
proportions(data,margin = c(1:2))
proportions(data[1:2],margin = c(1:2))
DF <- as.data.frame(UCBAdmissions)
tbl <- xtabs(Freq ~ Gender + Admit, DF)
tbl
data
xtabs(employed~government,private,self)
xtabs(employed~government,private,self,data = data)
xtabs(employed~government,private,self,data = data,sparse = TRUE)
xtabs(employed~government,private,self,data = data,sparse = TRUE,)
DF <- as.data.frame(UCBAdmissions)
DF
proportions(tbl, "Gender")
tbl
xtabs(employed~government+private+self,data = data,sparse = TRUE,)
xtabs(employed~government+private+self,data = data,sparse = TRUE)
xtabs(employed~government+private+self,data = data)
xtabs(employed~(government+private+self),data = data)
reshape(data,direction = "long")
reshape(data,direction = "long",varying = list(3:5))
stack(Data)
stack(data)
stack(data,select = government )
reshape(data,direction = "long",varying = list(3:5))
reshape(data,direction = "long",idvar =  = list(3:5))
reshape(data,direction = "long",idvar   = list(3:5))
reshape(data,direction = "long",varying    = list(3:5))
reshape(data,direction = "long",varying = list(3:6))
reshape(data,direction = "long",varying = list(3:5))
stack(data,form=government+private+self~sector)
stack(data,form=government+private+self~sector,drop = FALSE)
stack(data[,3:5],form=government+private+self~sector,drop = FALSE)
stack(data[,3:5],form=government+private+self~sector,drop = TRUE)
stack(data[,3:5],form=formula(government+private+self~sector),drop = TRUE)
dim(data)
PlantGrowth
formula(PlantGrowth)         # check the default formula
pg <- unstack(PlantGrowth)   # unstack according to this formula
pg
stack(pg)                    # now put it back together
stack(pg, select = -ctrl)
unstack(data,form=formula(government+private+self~sector),drop = TRUE)
unstack(data,form=formula(government+private+self))
data
unstack(data)
unstack(data[,3:5])
stack(data[,3:5])
reshape(data,direction = "long",varying = list(3:5))
reshape(data,direction = "long",varying = 3:5,idvar = "employed")
reshape(data,direction = "long",varying = 3:5,idvar = "employed")
reshape(data,direction = "long",varying = list(3:5),idvar = "employed")
reshape(data,direction = "long",varying = list(3:5))
reshape(data,direction = "long",varying = list(3:5),times = names(data)[3:5])
tbl <- xtabs(Freq ~ Gender + Admit, DF)
tbl
data<-data.frame(
employed = sample(c(3:100),100,TRUE),
unemployed = sample(c(3:100),100,TRUE),
government = sample(c(0,1),100,TRUE),
private = sample(c(0,1),100,TRUE),
self = sample(c(0,1),100,TRUE)
)
xtabs(data)
xtabs(data)|>proportions()
AAsamples<- readRDS("data/TRAINING_EC_SEQ.rds")
setwd("~/Documents/Master_CompBioCoimbra/BigData/PredECMain/")
## load librarys:
library(protr)
library(purrr)
library(tibble)
library(tidyr)
library(magrittr)# base R pipe does not support "." operator yet
## source functions from utils:
invisible(sapply(paste0("utils/",list.files("utils")),source))
AAsamples<- readRDS("data/TRAINING_EC_SEQ.rds")
AAsamples[[1]][2]
AAsamples[[1]][2]
readRDS(AA_DESC_df,"data/TRAINING_descriptors.rds")
AA_DESC_df<-readRDS("data/TRAINING_descriptors.rds")
View(AA_DESC_df)
library(protr)
seq<-AAsamples[[1]][[1]]
seq
extractAPAAC(seq)
length(AAsamples)
length(AAsamples[[1]])
View(AA_DESC_df)
AAC_d<-readRDS("data/TRAINING_EC.rds")
View(AAC_d)
AAsamples[[1]][2]
AAsamples$Hydrolases
str(AAsamples)
View(AA_DESC_df)
createDescriptors_sub(AAsamples[[1]][1])
testlist<-list(AAsamples[[1]][[2]],AAsamples[[3]][[2]],AAsamples[[1]][[4]],
AAsamples[[4]][[2]])
testlist
testlist<-list(a=list(AAsamples[[1]][[2]],AAsamples[[3]][[2]]),b=list(AAsamples[[1]][[4]],
AAsamples[[4]][[2]]))
testlist
out<-sapply(testlist, createDescriptors)
createDescriptors <- function(AAlist) {
AAlist %>%
sapply(createDescriptors_sub,simplify = "array") %>%
as.data.frame() #%>%
#t()
}
testlist<-list(a=list(AAsamples[[1]][[2]],AAsamples[[3]][[2]]),b=list(AAsamples[[1]][[4]],
AAsamples[[4]][[2]]))
out<-sapply(testlist, createDescriptors)
out
purrr::map_df(out, ~as.data.frame(.x), .id="EC")
testlist<-list(a=list(AAsamples[[1]][2],AAsamples[[3]][2]),b=list(AAsamples[[1]][4],
AAsamples[[4]][2]))
out<-sapply(testlist, createDescriptors)
purrr::map_df(out, ~as.data.frame(.x), .id="EC")
attributes(AAsamples)
attributes(testlist)
out<-sapply(testlist, createDescriptors)
purrr::map_df(out, ~as.data.frame(.x), .id="EC")
out
createDescriptors_sub <- function(sequence) {
s <- seqinr::s2c(sequence[1])
c(seqinr::AAstat(s,plot = FALSE)$Prop,
PI=seqinr::computePI(s),
MW=seqinr::pmw(s))
# seqinr::AAstat(s,plot = FALSE)$Prop %>%
#   as.data.frame() %>%
#   dplyr::mutate(PI=seqinr::computePI(s),MW=seqinr::pmw(s)) %>%
#   `rownames<-`(names(sequence))
}
testlist<-list(a=list(AAsamples[[1]][2],AAsamples[[3]][2]),b=list(AAsamples[[1]][4],
AAsamples[[4]][2]))
out<-sapply(testlist, createDescriptors)
purrr::map_df(out, ~as.data.frame(.x), .id="EC")
createDescriptors_sub <- function(sequence) {
s <- seqinr::s2c(sequence[[1]])
c(seqinr::AAstat(s,plot = FALSE)$Prop,
PI=seqinr::computePI(s),
MW=seqinr::pmw(s))
# seqinr::AAstat(s,plot = FALSE)$Prop %>%
#   as.data.frame() %>%
#   dplyr::mutate(PI=seqinr::computePI(s),MW=seqinr::pmw(s)) %>%
#   `rownames<-`(names(sequence))
}
createDescriptors_sub(AAsamples[[1]][1])
createDescriptors_sub(AAsamples[[1]][[1]])
createDescriptors_sub(AAsamples[[1]][[1]][1])
str(AAsamples)
attributes(AAsamples$Hydrolases)
AAsamples$Hydrolases[1]
AAsamples$Hydrolases[[1]]
AAsamples$Hydrolases[[1]][1]
AAsamples$Hydrolases[[1]][1] == AAsamples$Hydrolases[[1]]
out<-sapply(AAsamples, createDescriptors)
purrr::map_df(out, ~as.data.frame(.x), .id="EC")
out
createDescriptors_sub(AAsamples[[1]][[1]])
createDescriptors_sub <- function(sequence) {
s <- seqinr::s2c(sequence[[1]])
cbind(seqinr::AAstat(s,plot = FALSE)$Prop,
PI=seqinr::computePI(s),
MW=seqinr::pmw(s))
# seqinr::AAstat(s,plot = FALSE)$Prop %>%
#   as.data.frame() %>%
#   dplyr::mutate(PI=seqinr::computePI(s),MW=seqinr::pmw(s)) %>%
#   `rownames<-`(names(sequence))
}
createDescriptors_sub(AAsamples[[1]][[1]])
createDescriptors_sub <- function(sequence) {
s <- seqinr::s2c(sequence[[1]])
rbind(seqinr::AAstat(s,plot = FALSE)$Prop,
PI=seqinr::computePI(s),
MW=seqinr::pmw(s))
# seqinr::AAstat(s,plot = FALSE)$Prop %>%
#   as.data.frame() %>%
#   dplyr::mutate(PI=seqinr::computePI(s),MW=seqinr::pmw(s)) %>%
#   `rownames<-`(names(sequence))
}
createDescriptors_sub(AAsamples[[1]][[1]])
createDescriptors_sub <- function(sequence) {
s <- seqinr::s2c(sequence[[1]])
cbind(seqinr::AAstat(s,plot = FALSE)$Prop,
PI=seqinr::computePI(s),
MW=seqinr::pmw(s))
# seqinr::AAstat(s,plot = FALSE)$Prop %>%
#   as.data.frame() %>%
#   dplyr::mutate(PI=seqinr::computePI(s),MW=seqinr::pmw(s)) %>%
#   `rownames<-`(names(sequence))
}
createDescriptors_sub(AAsamples[[1]][[1]])
createDescriptors_sub(AAsamples[[1]][[1]])
createDescriptors_sub <- function(sequence) {
s <- seqinr::s2c(sequence[1])
cbind(c(seqinr::AAstat(s,plot = FALSE)$Prop),
PI=seqinr::computePI(s),
MW=seqinr::pmw(s))
# seqinr::AAstat(s,plot = FALSE)$Prop %>%
#   as.data.frame() %>%
#   dplyr::mutate(PI=seqinr::computePI(s),MW=seqinr::pmw(s)) %>%
#   `rownames<-`(names(sequence))
}
createDescriptors_sub(AAsamples[[1]][[1]])
rbind(c(seqinr::AAstat(s,plot = FALSE)$Prop),
PI=seqinr::computePI(s),
MW=seqinr::pmw(s))
createDescriptors_sub <- function(sequence) {
s <- seqinr::s2c(sequence[1])
rbind(c(seqinr::AAstat(s,plot = FALSE)$Prop),
PI=seqinr::computePI(s),
MW=seqinr::pmw(s))
# seqinr::AAstat(s,plot = FALSE)$Prop %>%
#   as.data.frame() %>%
#   dplyr::mutate(PI=seqinr::computePI(s),MW=seqinr::pmw(s)) %>%
#   `rownames<-`(names(sequence))
}
createDescriptors_sub(AAsamples[[1]][[1]])
createDescriptors_sub <- function(sequence) {
s <- seqinr::s2c(sequence[1])
rbind(unlist(seqinr::AAstat(s,plot = FALSE)$Prop),
PI=seqinr::computePI(s),
MW=seqinr::pmw(s))
# seqinr::AAstat(s,plot = FALSE)$Prop %>%
#   as.data.frame() %>%
#   dplyr::mutate(PI=seqinr::computePI(s),MW=seqinr::pmw(s)) %>%
#   `rownames<-`(names(sequence))
}
createDescriptors_sub(AAsamples[[1]][[1]])
createDescriptors_sub <- function(sequence) {
s <- seqinr::s2c(sequence[1])
cbind(unlist(seqinr::AAstat(s,plot = FALSE)$Prop),
PI=seqinr::computePI(s),
MW=seqinr::pmw(s))
# seqinr::AAstat(s,plot = FALSE)$Prop %>%
#   as.data.frame() %>%
#   dplyr::mutate(PI=seqinr::computePI(s),MW=seqinr::pmw(s)) %>%
#   `rownames<-`(names(sequence))
}
createDescriptors_sub(AAsamples[[1]][[1]])
createDescriptors_sub <- function(sequence) {
s <- seqinr::s2c(sequence[1])
list(seqinr::AAstat(s,plot = FALSE)$Prop,
PI=seqinr::computePI(s),
MW=seqinr::pmw(s))
# seqinr::AAstat(s,plot = FALSE)$Prop %>%
#   as.data.frame() %>%
#   dplyr::mutate(PI=seqinr::computePI(s),MW=seqinr::pmw(s)) %>%
#   `rownames<-`(names(sequence))
}
createDescriptors_sub(AAsamples[[1]][[1]])
createDescriptors_sub <- function(sequence) {
s <- seqinr::s2c(sequence[1])
c(seqinr::AAstat(s,plot = FALSE)$Prop,
PI=seqinr::computePI(s),
MW=seqinr::pmw(s))
# seqinr::AAstat(s,plot = FALSE)$Prop %>%
#   as.data.frame() %>%
#   dplyr::mutate(PI=seqinr::computePI(s),MW=seqinr::pmw(s)) %>%
#   `rownames<-`(names(sequence))
}
createDescriptors_sub(AAsamples[[1]][[1]])
createDescriptors <- function(AAlist) {
AAlist %>%
sapply(createDescriptors_sub,simplify = "array") %>%
as.data.frame() #%>%
#t()
}
createDescriptors_sub(AAsamples[[1]][[1]])
out<-sapply(testlist, createDescriptors)
createDescriptors_sub <- function(sequence) {
s <- seqinr::s2c(sequence[[1]])
c(seqinr::AAstat(s,plot = FALSE)$Prop,
PI=seqinr::computePI(s),
MW=seqinr::pmw(s))
# seqinr::AAstat(s,plot = FALSE)$Prop %>%
#   as.data.frame() %>%
#   dplyr::mutate(PI=seqinr::computePI(s),MW=seqinr::pmw(s)) %>%
#   `rownames<-`(names(sequence))
}
out<-sapply(testlist, createDescriptors)
purrr::map_df(out, ~as.data.frame(.x), .id="EC")
testlist<-list(a=list(bla=AAsamples[[1]][2],blub=AAsamples[[3]][2]),b=list(bub=AAsamples[[1]][4],
foo=AAsamples[[4]][2]))
out<-sapply(testlist, createDescriptors)
purrr::map_df(out, ~as.data.frame(.x), .id="EC")
attr(testlist)
attributes(testlist)
out<-sapply(testlist, createDescriptors)
purrr::map_df(out, ~as.data.frame(.x), .id="EC")
attributes(AAsamples)
attributes(testlist$a)
attributes(AAsamples$Hydrolases)
out<-sapply(AAsamples, createDescriptors)
str(out#
)
purrr::map_df(out, ~as.data.frame(.x), .id="EC")
purrr::map_df(out, ~as.data.frame(.x[1]), .id="EC")
purrr::map_df(out, ~as.data.frame(.x[[1]]), .id="EC")
createDescriptors <- function(AAlist) {
AAlist %>%
sapply(createDescriptors_sub,simplify = "array") %>%
as.data.frame() %>%
t()
}
testlist<-list(a=list(bla=AAsamples[[1]][2],blub=AAsamples[[3]][2]),b=list(bub=AAsamples[[1]][4],
foo=AAsamples[[4]][2]))
out<-sapply(testlist, createDescriptors)
purrr::map_df(out, ~as.data.frame(.x[[1]]), .id="EC")
purrr::map_df(out, ~as.data.frame(.x[1]), .id="EC")
purrr::map_df(out, ~as.data.frame(.x), .id="EC")
createDescriptors <- function(AAlist) {
AAlist %>%
sapply(createDescriptors_sub,simplify = "array") #%>%
#as.data.frame() %>%
#t()
}
testlist<-list(a=list(bla=AAsamples[[1]][2],blub=AAsamples[[3]][2]),b=list(bub=AAsamples[[1]][4],
foo=AAsamples[[4]][2]))
out<-sapply(testlist, createDescriptors)
purrr::map_df(out, ~as.data.frame(.x), .id="EC")
purrr::map_df(out, ~as.data.frame(.x[1]), .id="EC")
purrr::map_df(out, ~as.data.frame(.x), .id="EC")
createDescriptors <- function(AAlist) {
AAlist %>%
sapply(createDescriptors_sub,simplify = "array") %>%
as.data.frame()# %>%
#t()
}
testlist<-list(a=list(bla=AAsamples[[1]][2],blub=AAsamples[[3]][2]),b=list(bub=AAsamples[[1]][4],
foo=AAsamples[[4]][2]))
out<-sapply(testlist, createDescriptors)
purrr::map_df(out, ~as.data.frame(.x), .id="EC")
purrr::map_df(out, ~as.data.frame(.x[1]), .id="EC")
createDescriptors <- function(AAlist) {
AAlist %>%
sapply(createDescriptors_sub,simplify = FALSE) %>%
as.data.frame()# %>%
#t()
}
testlist<-list(a=list(bla=AAsamples[[1]][2],blub=AAsamples[[3]][2]),b=list(bub=AAsamples[[1]][4],
foo=AAsamples[[4]][2]))
out<-sapply(testlist, createDescriptors)
purrr::map_df(out, ~as.data.frame(.x[1]), .id="EC")
purrr::map_df(out, ~as.data.frame(.x), .id="EC")
out<-sapply(testlist, createDescriptors)
purrr::map_df(out, ~as.data.frame(.x), .id="EC")
createDescriptors <- function(AAlist) {
AAlist %>%
sapply(createDescriptors_sub,simplify = FALSE) %>%
as.data.frame()# %>%
#t()
}
out<-sapply(testlist, createDescriptors)
purrr::map_df(out, ~as.data.frame(.x), .id="EC")
createDescriptors <- function(AAlist) {
AAlist %>%
sapply(createDescriptors_sub,simplify = TRUE) %>%
as.data.frame()# %>%
#t()
}
out<-sapply(testlist, createDescriptors)
purrr::map_df(out, ~as.data.frame(.x), .id="EC")
out<-sapply(testlist, createDescriptors,simplify = FALSE)
purrr::map_df(out, ~as.data.frame(.x), .id="EC")
createDescriptors <- function(AAlist) {
AAlist %>%
sapply(createDescriptors_sub,simplify = TRUE) %>%
as.data.frame() %>%
t()
}
testlist<-list(a=list(bla=AAsamples[[1]][2],blub=AAsamples[[3]][2]),b=list(bub=AAsamples[[1]][4],
foo=AAsamples[[4]][2]))
out<-sapply(testlist, createDescriptors,simplify = FALSE)
purrr::map_df(out, ~as.data.frame(.x), .id="EC")
out<-sapply(AAsamples, createDescriptors)
purrr::map_df(out, ~as.data.frame(.x), .id="EC")
df <-purrr::map_df(out, ~as.data.frame(.x), .id="EC")
View(df)
fligts
flights
AAC_d<-readRDS("data/TRAINING_EC.rds")
AAsamples<- readRDS("data/TRAINING_EC_SEQ.rds")
## source functions from utils:
invisible(sapply(paste0("utils/",list.files("utils")),source))
AA_DESC<-sapply(AAsamples,createDescriptors,simplify = FALSE)
AA_DESC_df <- purrr::map_df(AA_DESC, ~as.data.frame(.x), .id="EC")
View(AA_DESC_df)
attributes(AAsamples)
attributes(AA_DESC)
attributes(AA_DESC[1])
str(AA_DESC[1])
str(AA_DESC[1][1])
View(AA_DESC)
AA_DESC[["Hydrolases"]][[1]]
names(AA_DESC[["Hydrolases"]][[1]])
names(AA_DESC[["Hydrolases"]][1])
View(AA_DESC_df)
id<-"A3Q0G0"
out<-getUniProt_custom(id)
out
createDescriptors(id)
s <- seqinr::s2c(out)
s <- seqinr::s2c(out[[1]])
c(seqinr::AAstat(s,plot = FALSE)$Prop,
PI=seqinr::computePI(s),
MW=seqinr::pmw(s))
protr::extractAPAAC(id)
id
protr::extractAPAAC(id[1])
protr::extractAPAAC(out)
out
protr::extractAPAAC(out[[1]])
createDescriptors_APAAC <- function(AAlist) {
AAlist %>%
sapply(protr::extractAPAAC(id),simplify = TRUE) %>%
as.data.frame() %>%
t()
}
createDescriptors_APAAC <- function(AAlist) {
AAlist %>%
sapply(protr::extractAPAAC(id),simplify = TRUE) %>%
as.data.frame() %>%
t()
}
sapply(AAsamples, createDescriptors_APAAC,simplify = FALSE)
sapply(AAsamples$Hydrolases, createDescriptors_APAAC,simplify = FALSE)
sapply(AAsamples$Hydrolases[1], createDescriptors_APAAC,simplify = FALSE)
sapply(AAsamples$Hydrolases[[1]], createDescriptors_APAAC,simplify = FALSE)
sapply(AAsamples$Hydrolases[[1]][1], createDescriptors_APAAC,simplify = FALSE)
AAsamples$Hydrolases[[1]][1]
createDescriptors_APAAC(AAsamples$Hydrolases[[1]][1])
createDescriptors_APAAC(AAsamples$Hydrolases[[1]][4])
AAsamples$Hydrolases[[1]][4]
createDescriptors_APAAC(AAsamples$Hydrolases[[3]][1])
createDescriptors_APAAC <- function(AAlist) {
AAlist %>%
sapply(protr::extractAPAAC(id),simplify = TRUE) %>%
as.data.frame() %>%
t()
}
extractAPAAC(AAsamples$Hydrolases[[3]][1])
sapply(AAsamples$Hydrolases, extractAPAAC)
sapply(AAsamples$Hydrolases, extractAPAAC,simplify = FALSE)
